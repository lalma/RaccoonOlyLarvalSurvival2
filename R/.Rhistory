for(i in 1:n){
r = runif(1)
rj_temp <- dist %>%
filter(sample_count == count &
cummulative_prob >= r &
lag(cummulative_prob) < r ) %>%
pull(jar_actual_larvae) %>%
{.}
if(is_empty(rj_temp)){
rj_temp <- 0
}
rj <- c(rj, rj_temp)
}
return(rj)
}
#read in the real data
# count data for 6ml samples
d_count <- read_excel(here("data","real data.xlsx")) %>%
arrange(jar_id, day) %>%
group_by(jar_id) %>%
mutate(delta_count = count - lag(count)) %>%
ungroup()
#vector of unique jar IDs = 48
all_jars <- unique(d_count$jar_id)
all_jars
#find problem jars with large increase in count from one time step to the next
problem_jars <- d_count %>%
filter(delta_count >= 10 ) %>%
pull(jar_id) %>%
unique() %>%
{.}
good_jars <- all_jars[!(all_jars %in% problem_jars)]
#Create simulated jar sample time series
# n_rep = number of replicate series to create
# This should be >=500 but 5 is engouhg to show how it works
n_rep <- 5
# empty frame to hold result
d_sim <- NULL
#pick which jars to run
#run_jars <- jar
run_jars <- problem_jars
#run_jars <- good_jars
#loop through all the jars picked
#time the loop
start_time <- Sys.time()
for(i in 1:length(run_jars)){
#print jar to track progress
print(paste("jar",run_jars[i]))
#use data from one jar
d_jar <- d_count %>%
filter(jar_id == run_jars[i])
#vector of raw jar sample count
count <- d_jar$count
n_count <- length(count)
# vector the same lenght as count to hold random draw data
#(this gets over-written)
r_count <- count
# initialize rep counter to track number of simulated series
rep_counter <- 1
# while to so keep repeating until you get enough decreasing time series
while(rep_counter <= n_rep) {
#create a simulated jar counter time series
for(j in 1:n_count){
r_count[j] <- r_jar(1, count[j], d_jar_dist)
}
#test whether the series is monotonically decreasing
is_valid <-  all(if_else(r_count <= lag(r_count), TRUE, FALSE), na.rm = TRUE)
# if decreasing, add the result to the data frame and increment rep counter
if(is_valid){
d_temp <- data.frame(day = d_jar$day,
raw_count = count,
sim_count = r_count) %>%
mutate(jar_id = run_jars[i],
rep_id = rep_counter,
treatment = d_jar$treatment[1],
site = d_jar$treatment[1])
d_sim <- rbind(d_sim, d_temp)
#print rep counter to track progress
print(paste("rep_counter", rep_counter))
rep_counter = rep_counter + 1
}
}
}
#pick which jars to run
#run_jars <- jar
#run_jars <- problem_jars
run_jars <- good_jars
#loop through all the jars picked
#time the loop
start_time <- Sys.time()
for(i in 1:length(run_jars)){
#print jar to track progress
print(paste("jar",run_jars[i]))
#use data from one jar
d_jar <- d_count %>%
filter(jar_id == run_jars[i])
#vector of raw jar sample count
count <- d_jar$count
n_count <- length(count)
# vector the same lenght as count to hold random draw data
#(this gets over-written)
r_count <- count
# initialize rep counter to track number of simulated series
rep_counter <- 1
# while to so keep repeating until you get enough decreasing time series
while(rep_counter <= n_rep) {
#create a simulated jar counter time series
for(j in 1:n_count){
r_count[j] <- r_jar(1, count[j], d_jar_dist)
}
#test whether the series is monotonically decreasing
is_valid <-  all(if_else(r_count <= lag(r_count), TRUE, FALSE), na.rm = TRUE)
# if decreasing, add the result to the data frame and increment rep counter
if(is_valid){
d_temp <- data.frame(day = d_jar$day,
raw_count = count,
sim_count = r_count) %>%
mutate(jar_id = run_jars[i],
rep_id = rep_counter,
treatment = d_jar$treatment[1],
site = d_jar$treatment[1])
d_sim <- rbind(d_sim, d_temp)
#print rep counter to track progress
print(paste("rep_counter", rep_counter))
rep_counter = rep_counter + 1
}
}
}
end_time <- Sys.time()
end_time - start_time
# plot the first 5 simulated series for all jars
d_sim %>%
filter(rep_id <= 5) %>%
ggplot(aes(day, sim_count)) +
geom_line(aes(colour = as.factor(rep_id))) +
facet_wrap(vars(jar_id))
#write simulated series to file
d_sim %>%
arrange(jar_id, re, day) %>%
write_csv(here("output", "d_sim.csv"))
View(d_sim)
write_csv(here("output", "d_sim.csv"))
write_csv("d_sim.csv"))
write_csv("d_sim.csv")
#write simulated series to file
d_sim %>%
arrange(jar_id, re, day) %>%
write_csv(here("output", "d_sim.csv"))
write.csv(d_sim, "d_sim.csv")
#write simulated series to file
d_sim %>%
arrange(jar_id, re, day) %>%
write_csv(here("output", "d_sim.csv"))
#write simulated series to file
d_sim %>%
arrange(jar_id, re, day) %>%
write_csv("output", "d_sim.csv")
View(d_sim)
#write simulated series to file
d_sim %>%
arrange(jar_id, rep_id, day) %>%
write_csv(here("output", "d_sim.csv"))
View(d_sim)
#Create simulated jar sample time series
# n_rep = number of replicate series to create
# This should be >=500 but 5 is engouhg to show how it works
n_rep <- 500
# empty frame to hold result
d_sim <- NULL
#loop through all the jars picked
#time the loop
start_time <- Sys.time()
for(i in 1:length(run_jars)){
#print jar to track progress
print(paste("jar",run_jars[i]))
#use data from one jar
d_jar <- d_count %>%
filter(jar_id == run_jars[i])
#vector of raw jar sample count
count <- d_jar$count
n_count <- length(count)
# vector the same lenght as count to hold random draw data
#(this gets over-written)
r_count <- count
# initialize rep counter to track number of simulated series
rep_counter <- 1
# while to so keep repeating until you get enough decreasing time series
while(rep_counter <= n_rep) {
#create a simulated jar counter time series
for(j in 1:n_count){
r_count[j] <- r_jar(1, count[j], d_jar_dist)
}
#test whether the series is monotonically decreasing
is_valid <-  all(if_else(r_count <= lag(r_count), TRUE, FALSE), na.rm = TRUE)
# if decreasing, add the result to the data frame and increment rep counter
if(is_valid){
d_temp <- data.frame(day = d_jar$day,
raw_count = count,
sim_count = r_count) %>%
mutate(jar_id = run_jars[i],
rep_id = rep_counter,
treatment = d_jar$treatment[1],
site = d_jar$treatment[1])
d_sim <- rbind(d_sim, d_temp)
#print rep counter to track progress
print(paste("rep_counter", rep_counter))
rep_counter = rep_counter + 1
}
}
}
#loop through all the jars picked
#time the loop
start_time <- Sys.time()
for(i in 1:length(run_jars)){
#print jar to track progress
print(paste("jar",run_jars[i]))
#use data from one jar
d_jar <- d_count %>%
filter(jar_id == run_jars[i])
#vector of raw jar sample count
count <- d_jar$count
n_count <- length(count)
# vector the same lenght as count to hold random draw data
#(this gets over-written)
r_count <- count
# initialize rep counter to track number of simulated series
rep_counter <- 1
# while to so keep repeating until you get enough decreasing time series
while(rep_counter <= n_rep) {
#create a simulated jar counter time series
for(j in 1:n_count){
r_count[j] <- r_jar(1, count[j], d_jar_dist)
}
#test whether the series is monotonically decreasing
is_valid <-  all(if_else(r_count <= lag(r_count), TRUE, FALSE), na.rm = TRUE)
# if decreasing, add the result to the data frame and increment rep counter
if(is_valid){
d_temp <- data.frame(day = d_jar$day,
raw_count = count,
sim_count = r_count) %>%
mutate(jar_id = run_jars[i],
rep_id = rep_counter,
treatment = d_jar$treatment[1],
site = d_jar$treatment[1])
d_sim <- rbind(d_sim, d_temp)
#print rep counter to track progress
print(paste("rep_counter", rep_counter))
rep_counter = rep_counter + 1
}
}
}
end_time <- Sys.time()
end_time - start_time
#write simulated series to file
d_sim %>%
arrange(jar_id, rep_id, day) %>%
write_csv(here("output", "d_sim.csv"))
library(tidyverse)
library(here)
library(readxl)
#jar and sample volumes (ml)
vol_jar <- 100
vol_sample <- 6
#fraction of water sampled
# this is the probably of successfully get a larva from the jar
# in a binomial process
p <- vol_sample / vol_jar
# maximum number if larvae ever counted in a 6ml sample (can change this to the actual value)
max_count <- 71
# total number of larvae you think there could possibly be in a jar
# (since target initial abundance is 800, 2000 should be plenty
#no penalty for guessing big except a waste of computer time
max_possible_larvae <- 2000
#data frame of the
# prob_count_given_jar is the likelihood of getting a particular count value given some actual number of larva in jar
#prob_jar_given_count is the probably of how many larve are in the jar given a count value (bayes therom assuming uniform prior)
#cummulative_prob is useful for getting random samples
d_jar_dist <- data.frame(sample_count = rep(0:max_count, each = max_possible_larvae + 1)) %>%
mutate(jar_actual_larvae = rep(0:max_possible_larvae, times = max_count + 1)) %>%
mutate(prob_count_given_jar = pbinom(sample_count, jar_actual_larvae, p) -
pbinom(sample_count-1, jar_actual_larvae, p)) %>%
group_by(sample_count) %>%
mutate(prob_jar_given_count = prob_count_given_jar / sum(prob_count_given_jar)) %>%
mutate(cummulative_prob = cumsum(prob_jar_given_count)) %>%
ungroup() %>%
{.}
#function that returns a vector (length = n) of random number of larvae in a jar given 6ml subsample count
r_jar <- function(n, count, dist){
rj <- NULL
for(i in 1:n){
r = runif(1)
rj_temp <- dist %>%
filter(sample_count == count &
cummulative_prob >= r &
lag(cummulative_prob) < r ) %>%
pull(jar_actual_larvae) %>%
{.}
if(is_empty(rj_temp)){
rj_temp <- 0
}
rj <- c(rj, rj_temp)
}
return(rj)
}
#read in the real data
# count data for 6ml samples
d_count <- read_excel(here("data","real data.xlsx")) %>%
arrange(jar_id, day) %>%
group_by(jar_id) %>%
mutate(delta_count = count - lag(count)) %>%
ungroup()
#vector of unique jar IDs = 48
all_jars <- unique(d_count$jar_id)
#find problem jars with large increase in count from one time step to the next
problem_jars <- d_count %>%
filter(delta_count >= 10 ) %>%
pull(jar_id) %>%
unique() %>%
{.}
good_jars <- all_jars[!(all_jars %in% problem_jars)]
#pick which jars to run
#run_jars <- jar
run_jars <- problem_jars
#run_jars <- good_jars
#loop through all the jars picked
#time the loop
start_time <- Sys.time()
for(i in 1:length(run_jars)){
#print jar to track progress
print(paste("jar",run_jars[i]))
#use data from one jar
d_jar <- d_count %>%
filter(jar_id == run_jars[i])
#vector of raw jar sample count
count <- d_jar$count
n_count <- length(count)
# vector the same lenght as count to hold random draw data
#(this gets over-written)
r_count <- count
# initialize rep counter to track number of simulated series
rep_counter <- 1
# while to so keep repeating until you get enough decreasing time series
while(rep_counter <= n_rep) {
#create a simulated jar counter time series
for(j in 1:n_count){
r_count[j] <- r_jar(1, count[j], d_jar_dist)
}
#test whether the series is monotonically decreasing
is_valid <-  all(if_else(r_count <= lag(r_count), TRUE, FALSE), na.rm = TRUE)
# if decreasing, add the result to the data frame and increment rep counter
if(is_valid){
d_temp <- data.frame(day = d_jar$day,
raw_count = count,
sim_count = r_count) %>%
mutate(jar_id = run_jars[i],
rep_id = rep_counter,
treatment = d_jar$treatment[1],
site = d_jar$treatment[1])
d_sim <- rbind(d_sim, d_temp)
#print rep counter to track progress
print(paste("rep_counter", rep_counter))
rep_counter = rep_counter + 1
}
}
}
#Create simulated jar sample time series
# n_rep = number of replicate series to create
# This should be >=500 but 5 is engouhg to show how it works
n_rep <- 200
# empty frame to hold result
d_sim <- NULL
#pick which jars to run
#run_jars <- jar
run_jars <- problem_jars
#run_jars <- good_jars
#loop through all the jars picked
#time the loop
start_time <- Sys.time()
for(i in 1:length(run_jars)){
#print jar to track progress
print(paste("jar",run_jars[i]))
#use data from one jar
d_jar <- d_count %>%
filter(jar_id == run_jars[i])
#vector of raw jar sample count
count <- d_jar$count
n_count <- length(count)
# vector the same lenght as count to hold random draw data
#(this gets over-written)
r_count <- count
# initialize rep counter to track number of simulated series
rep_counter <- 1
# while to so keep repeating until you get enough decreasing time series
while(rep_counter <= n_rep) {
#create a simulated jar counter time series
for(j in 1:n_count){
r_count[j] <- r_jar(1, count[j], d_jar_dist)
}
#test whether the series is monotonically decreasing
is_valid <-  all(if_else(r_count <= lag(r_count), TRUE, FALSE), na.rm = TRUE)
# if decreasing, add the result to the data frame and increment rep counter
if(is_valid){
d_temp <- data.frame(day = d_jar$day,
raw_count = count,
sim_count = r_count) %>%
mutate(jar_id = run_jars[i],
rep_id = rep_counter,
treatment = d_jar$treatment[1],
site = d_jar$treatment[1])
d_sim <- rbind(d_sim, d_temp)
#print rep counter to track progress
print(paste("rep_counter", rep_counter))
rep_counter = rep_counter + 1
}
}
}
#write simulated series to file
d_sim %>%
arrange(jar_id, rep_id, day) %>%
write_csv(here("output", "d_sim_pt_200.csv"))
KMdf <- read_excel(here("data","d_sim_all_1only.xlsx"))
#library
library(tidyverse)
library(here)
library(readxl)
KMdf <- read_excel(here("data","d_sim_all_1only.xlsx"))
head(KMdf)
View(KMdf)
KMdf <- read_excel(here("data","d_sim_all_1only.xlsx"))
View(KMdf)
KMdf <- read_excel(here("data","d_sim_all_1only.xlsx"))
View(KMdf)
KMdf[1,1]
KMdf[1,3]
dead<-0
alive<-1
day1<-KMdf[1,3]
data.frame(length(day1)
data.frame(length(day1))
data.frame(length(day1))
day1<-KMdf[1,3]
day1
data.frame(length(day1))
df<-data.frame(length(day1))
df
df<-data.frame(count(day1))
df
write_meta_template(rawData, here("data","metadata"))
library(metacsv)
library(todor)
# Alma musseel experiment
# likelihood of larvae in jar
install.packages("todor")
# Alma musseel experiment
# likelihood of larvae in jar
install.packages("metacsv")
library(metacsv)
# Alma musseel experiment
# likelihood of larvae in jar
install.packages("metacsv")
installr::
#library
library(tidyverse)
installr::
#library
library(tidyverse)
library(installr)
updateR()
# Alma musseel experiment
# likelihood of larvae in jar
install.packages("metacsv")
write_csv(here("output", "d_expand.csv"))
library(tidyverse)
library(here)
library(readxl)
library(dplyr)
write_csv(here("output", "d_expand.csv"))
View(d_expand)
d <- read_csv(here("output", "d_sim_pj_300.csv")) %>%
filter(jar_id == 31, rep_id == 1) %>%
arrange(jar_id, rep_id, day)
View(d)
#create a data frame for the expanded data
#populate day and status with default assumptoin that they are alive at the last sample day
d_expand <- data.frame(jar_id =rep(d$jar_id[1], d$sim_count[1])) %>%
mutate(rep_id = d$rep_id[1],
treatment = d$treatment[1],
site = d$site[1],
day = d$day[nrow(d)],
status = 0)
View(d_expand)
#loop through all the days, assigning status = 1 and day to the right number of individuals
# dead_index and new_dead help make sure you change the correct row for status and day
# any thing that didn't die remains right censored (status = 0 on last day)
dead_index <- 1
for(i in 2:nrow(d)){
new_dead <- d$sim_count[i-1] - d$sim_count[i]
d_expand$day[dead_index:(dead_index+new_dead)] <- d$day[i]
d_expand$status[dead_index:(dead_index+new_dead)] <- 1
dead_index <- dead_index + new_dead
}
View(dead_index)
View(new_dead)
# use a frequency table to check that the example worked.
# this shows that the last count is off by one.
# I'll leave it to you to fix that...
lag(d$sim_count) - d$sim_count
table(d_expand$day, d_expand$status)
View(d_expand)
write_csv(here("output", "d_expand.csv"))
#library
library(tidyverse)
