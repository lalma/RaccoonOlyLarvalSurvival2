))
ggsurvplot(sf, data=database, conf.int=T,  risk.table=F, pval=F,legend=c("right"), linetype="treatment",
legend.labs=c("CI20-14C","CI5-14C","DB-14C","PW-14C", "CI20-20C", "CI5-20C", "DB-20C", "PW-20C"),legend.title="Treatment",
palette =  c( '#33CC66','steelblue','black','darkgoldenrod1', '#33CC66','steelblue','red','darkgoldenrod1'),
risk.table.height=.25,xlab="Time (days)", size=0.7, break.time.by = 3, break.y.by=.2, ggtheme = theme_bw() +  theme(
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
))
ggsurvplot(sf, data=database, conf.int=T,  risk.table=F, pval=F,legend=c("right"), linetype="treatment",
legend.labs=c("CI20-14C","CI5-14C","DB-14C","PW-14C", "CI20-20C", "CI5-20C", "DB-20C", "PW-20C"),legend.title="Treatment",
palette =  c( '#33CC66','steelblue','red','darkgoldenrod1', '#33CC66','steelblue','black','darkgoldenrod1'),
risk.table.height=.25,xlab="Time (days)", size=0.7, break.time.by = 3, break.y.by=.2, ggtheme = theme_bw() +  theme(
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
))
ggsurvplot(sf, data=database, conf.int=T,  risk.table=F, pval=F,legend=c("right"), linetype=""treatment"site",
legend.labs=c("CI20-14C","CI5-14C","DB-14C","PW-14C", "CI20-20C", "CI5-20C", "DB-20C", "PW-20C"),legend.title="Treatment",
palette =  c( '#33CC66','steelblue','red','darkgoldenrod1', '#33CC66','steelblue','red','darkgoldenrod1'),
risk.table.height=.25,xlab="Time (days)", size=0.7, break.time.by = 3, break.y.by=.2, ggtheme = theme_bw() +  theme(
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
))
ggsurvplot(sf, data=database, conf.int=T,  risk.table=F, pval=F,legend=c("right"), linetype="site",
legend.labs=c("CI20-14C","CI5-14C","DB-14C","PW-14C", "CI20-20C", "CI5-20C", "DB-20C", "PW-20C"),legend.title="Treatment",
palette =  c( '#33CC66','steelblue','red','darkgoldenrod1', '#33CC66','steelblue','red','darkgoldenrod1'),
risk.table.height=.25,xlab="Time (days)", size=0.7, break.time.by = 3, break.y.by=.2, ggtheme = theme_bw() +  theme(
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
))
ggsurvplot(sf, data=database, conf.int=T,  risk.table=F, pval=F,legend=c("right"), linetype=c(1,2,3,4,5,5,6,7),
legend.labs=c("CI20-14C","CI5-14C","DB-14C","PW-14C", "CI20-20C", "CI5-20C", "DB-20C", "PW-20C"),legend.title="Treatment",
palette =  c( '#33CC66','steelblue','red','darkgoldenrod1', '#33CC66','steelblue','red','darkgoldenrod1'),
risk.table.height=.25,xlab="Time (days)", size=0.7, break.time.by = 3, break.y.by=.2, ggtheme = theme_bw() +  theme(
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
))
ggsurvplot(sf, data=database, conf.int=T,  risk.table=F, pval=F,legend=c("right"), linetype=c(1,2,3,1,3,1,2),
legend.labs=c("CI20-14C","CI5-14C","DB-14C","PW-14C", "CI20-20C", "CI5-20C", "DB-20C", "PW-20C"),legend.title="Treatment",
palette =  c( '#33CC66','steelblue','red','darkgoldenrod1', '#33CC66','steelblue','red','darkgoldenrod1'),
risk.table.height=.25,xlab="Time (days)", size=0.7, break.time.by = 3, break.y.by=.2, ggtheme = theme_bw() +  theme(
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
))
ggsurvplot(sf, data=database, conf.int=T,  risk.table=F, pval=F,legend=c("right"), linetype=c(1,2,3,1,3,1,2,1),
legend.labs=c("CI20-14C","CI5-14C","DB-14C","PW-14C", "CI20-20C", "CI5-20C", "DB-20C", "PW-20C"),legend.title="Treatment",
palette =  c( '#33CC66','steelblue','red','darkgoldenrod1', '#33CC66','steelblue','red','darkgoldenrod1'),
risk.table.height=.25,xlab="Time (days)", size=0.7, break.time.by = 3, break.y.by=.2, ggtheme = theme_bw() +  theme(
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
))
ggsurvplot(sf, data=database, conf.int=T,  risk.table=F, pval=F,legend=c("right"), linetype=c(1,1,1,1,2,2,2),
legend.labs=c("CI20-14C","CI5-14C","DB-14C","PW-14C", "CI20-20C", "CI5-20C", "DB-20C", "PW-20C"),legend.title="Treatment",
palette =  c( '#33CC66','steelblue','red','darkgoldenrod1', '#33CC66','steelblue','red','darkgoldenrod1'),
risk.table.height=.25,xlab="Time (days)", size=0.7, break.time.by = 3, break.y.by=.2, ggtheme = theme_bw() +  theme(
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
))
ggsurvplot(sf, data=database, conf.int=T,  risk.table=F, pval=F,legend=c("right"), linetype=c(1,1,1,1,2,2,2,2),
legend.labs=c("CI20-14C","CI5-14C","DB-14C","PW-14C", "CI20-20C", "CI5-20C", "DB-20C", "PW-20C"),legend.title="Treatment",
palette =  c( '#33CC66','steelblue','red','darkgoldenrod1', '#33CC66','steelblue','red','darkgoldenrod1'),
risk.table.height=.25,xlab="Time (days)", size=0.7, break.time.by = 3, break.y.by=.2, ggtheme = theme_bw() +  theme(
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
))
ggsurvplot(sf, data=database, conf.int=T,  risk.table=F, pval=F,legend=c("right"), linetype=c(2,2,2,2, 1,1,1,1),
legend.labs=c("CI20-14C","CI5-14C","DB-14C","PW-14C", "CI20-20C", "CI5-20C", "DB-20C", "PW-20C"),legend.title="Treatment",
palette =  c( '#33CC66','steelblue','red','darkgoldenrod1', '#33CC66','steelblue','red','darkgoldenrod1'),
risk.table.height=.25,xlab="Time (days)", size=0.7, break.time.by = 3, break.y.by=.2, ggtheme = theme_bw() +  theme(
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
))
ggsurvplot(sf, data=database, conf.int=T,  risk.table=F, pval=F,legend=c("right"), linetype=c(2,2,2,2, 1,1,1,1),
legend.labs=c("CI20-14C","CI5-14C","DB-14C","PW-14C", "CI20-20C", "CI5-20C", "DB-20C", "PW-20C"),legend.title="Treatment",
palette =  c( '#33CC66','steelblue','red','darkgoldenrod1', '#33CC66','steelblue','black','darkgoldenrod1'),
risk.table.height=.25,xlab="Time (days)", size=0.7, break.time.by = 3, break.y.by=.2, ggtheme = theme_bw() +  theme(
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
))
ggsurvplot(sf, data=database, conf.int=T,  risk.table=F, pval=F,legend=c("right"), linetype=c(2,2,2,2, 1,1,1,1),
legend.labs=c("CI20-14C","CI5-14C","DB-14C","PW-14C", "CI20-20C", "CI5-20C", "DB-20C", "PW-20C"),legend.title="Treatment",
palette =  c( '#33CC66','steelblue','black','darkgoldenrod1', '#33CC66','steelblue','red','darkgoldenrod1'),
risk.table.height=.25,xlab="Time (days)", size=0.7, break.time.by = 3, break.y.by=.2, ggtheme = theme_bw() +  theme(
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
))
ggsurvplot(sf, data=database, conf.int=T,  risk.table=F, pval=F,legend=c("right"), linetype=c(2,2,2,2, 1,1,1,1), linetype="site"
legend.labs=c("CI20-14C","CI5-14C","DB-14C","PW-14C", "CI20-20C", "CI5-20C", "DB-20C", "PW-20C"),legend.title="Treatment",
palette =  c( '#33CC66','steelblue','red','darkgoldenrod1', '#33CC66','steelblue','red','darkgoldenrod1'),
risk.table.height=.25,xlab="Time (days)", size=0.7, break.time.by = 3, break.y.by=.2, ggtheme = theme_bw() +  theme(
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
))
ggsurvplot(sf, data=database, conf.int=T,  risk.table=F, pval=F,legend=c("right"),  linetype="site",
legend.labs=c("CI20-14C","CI5-14C","DB-14C","PW-14C", "CI20-20C", "CI5-20C", "DB-20C", "PW-20C"),legend.title="Treatment",
palette =  c( '#33CC66','steelblue','red','darkgoldenrod1', '#33CC66','steelblue','red','darkgoldenrod1'),
risk.table.height=.25,xlab="Time (days)", size=0.7, break.time.by = 3, break.y.by=.2, ggtheme = theme_bw() +  theme(
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
))
ggsurvplot(sf, data=database, conf.int=T,  risk.table=F, pval=F,legend=c("right"),  linetype=c(1,2),
legend.labs=c("CI20-14C","CI5-14C","DB-14C","PW-14C", "CI20-20C", "CI5-20C", "DB-20C", "PW-20C"),legend.title="Treatment",
palette =  c( '#33CC66','steelblue','red','darkgoldenrod1', '#33CC66','steelblue','red','darkgoldenrod1'),
risk.table.height=.25,xlab="Time (days)", size=0.7, break.time.by = 3, break.y.by=.2, ggtheme = theme_bw() +  theme(
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
))
ggsurvplot(sf, data=database, conf.int=T,  risk.table=F, pval=F,legend=c("right"),  linetype="treatment",
legend.labs=c("CI20-14C","CI5-14C","DB-14C","PW-14C", "CI20-20C", "CI5-20C", "DB-20C", "PW-20C"),legend.title="Treatment",
palette =  c( '#33CC66','steelblue','red','darkgoldenrod1', '#33CC66','steelblue','red','darkgoldenrod1'),
risk.table.height=.25,xlab="Time (days)", size=0.7, break.time.by = 3, break.y.by=.2, ggtheme = theme_bw() +  theme(
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
))
ggsurvplot(sf, data=database, conf.int=T,  risk.table=F, pval=F,legend=c("right"),  linetype=c(2,2,2,2, 1,1,1,1),
legend.labs=c("CI20-14C","CI5-14C","DB-14C","PW-14C", "CI20-20C", "CI5-20C", "DB-20C", "PW-20C"),legend.title="Treatment",
palette =  c( '#33CC66','steelblue','red','darkgoldenrod1', '#33CC66','steelblue','red','darkgoldenrod1'),
risk.table.height=.25,xlab="Time (days)", size=0.7, break.time.by = 3, break.y.by=.2, ggtheme = theme_bw() +  theme(
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
))
#head(coefficients_ci20)
write.csv(here(coefficients_ci20, "data", "coefficients_ci20.csv"))
p$plot + scale_linetype_discrete(name = "Pop Data", labels = c("A", "B"))
class(p$plot)
p<-ggsurvplot(sf, data=bigcox, conf.int=T,  risk.table=F, pval=F,legend=c("right"),
legend.labs=c("CI20-14C","CI5-14C","DB-14C","PW-14C", "CI20-20C", "CI5-20C", "DB-20C", "PW-20C"),legend.title="Treatment",
palette =  c('darkgreen', 'blue4', 'darkred', 'darkgoldenrod', '#33CC66','steelblue','red','darkgoldenrod1'),
risk.table.height=.25,xlab="Time (days)", size=0.7, break.time.by = 3, break.y.by=.2, ggtheme = theme_bw() +  theme(
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
))
p$plot + scale_linetype_discrete(name = "Pop Data", labels = c("A", "B"))
p$plot + scale_linetype_discrete(name = "treat,emt", labels = c("A", "B"))
p$plot + scale_linetype_discrete(name = "treatmemt", labels = c("A", "B"))
p<-ggsurvplot(sf, data=bigcox, conf.int=T,  risk.table=F, pval=F,legend=c("right"),conf.int.fill=T,
legend.labs=c("CI20-14C","CI5-14C","DB-14C","PW-14C", "CI20-20C", "CI5-20C", "DB-20C", "PW-20C"),legend.title="Treatment",
palette =  c('darkgreen', 'blue4', 'darkred', 'darkgoldenrod', '#33CC66','steelblue','red','darkgoldenrod1'),
risk.table.height=.25,xlab="Time (days)", size=0.7, break.time.by = 3, break.y.by=.2, ggtheme = theme_bw() +  theme(
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
))
p<-ggsurvplot(sf, data=bigcox, conf.int=T,  risk.table=F, pval=F,legend=c("right"),conf.int.fill=T, conf.int.style=T, conf.in,alpha=1,
legend.labs=c("CI20-14C","CI5-14C","DB-14C","PW-14C", "CI20-20C", "CI5-20C", "DB-20C", "PW-20C"),legend.title="Treatment",
palette =  c('darkgreen', 'blue4', 'darkred', 'darkgoldenrod', '#33CC66','steelblue','red','darkgoldenrod1'),
risk.table.height=.25,xlab="Time (days)", size=0.7, break.time.by = 3, break.y.by=.2, ggtheme = theme_bw() +  theme(
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
))
bigcox[order[bigcox$treatment),]
p<-ggsurvplot(sf, data=bigcox, conf.int=T,  risk.table=F, pval=F,legend=c("right"),
legend.labs=c("CI20-14C","CI5-14C","DB-14C","PW-14C", "CI20-20C", "CI5-20C", "DB-20C", "PW-20C"),legend.title="Treatment",
palette =  c('darkgreen', 'blue4', 'darkred', 'darkgoldenrod', '#33CC66','steelblue','red','darkgoldenrod1'),
risk.table.height=.25,xlab="Time (days)", size=0.7, break.time.by = 3, break.y.by=.2, ggtheme = theme_bw() +  theme(
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
))
################## PM : Question about the plot. Shouldnt we have much fatter looking confience intervals given we have all the replicates?
head(bigcox)
#Just 1 rep cox output
R1<-subset(bigcox, rep_id=="1")
KMsurv = Surv(time = R1$day, R1$status, type = "right")
sf <- survfit(KMsurv ~ site + treatment, data = R1)
coxR1<-coxph(KMsurv~treatment*site, data=R1)
S1<-summary(coxR1)
S1
out1 = tidy(coxR1)
out1
write.csv(here("out1.csv"))
#writing the for loop model
database<-bigcox
head(database)
numreps <- as.numeric(max(database$rep_id)) #number of replicates=500 single number
k <- filter(database, database$rep_id == 1)#only 1 out of 500 reps
############################CI20
#make the data for graphing
sv = Surv(time = database$day, database$status, type = "right") #running Surv model on the replicate,
#taking into account day and status
sf <- survfit(sv ~ site + treatment, data = database) #taking what we just made and
#putting it into a different function
#graphing it
ggsurvplot(sf, data=database, conf.int = T, pval=T, )
ggsurvplot(sf, data=database, conf.int=T,  risk.table=F, pval=F,legend=c("right"),  linetype=c(2,2,2,2, 1,1,1,1),
legend.labs=c("CI20-14C","CI5-14C","DB-14C","PW-14C", "CI20-20C", "CI5-20C", "DB-20C", "PW-20C"),legend.title="Treatment",
palette =  c( '#33CC66','steelblue','red','darkgoldenrod1', '#33CC66','steelblue','red','darkgoldenrod1'),
risk.table.height=.25,xlab="Time (days)", size=0.7, break.time.by = 3, break.y.by=.2, ggtheme = theme_bw() +  theme(
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
))
#figure out a way to manually define confidence intervals based on the different replicates
#create an empty list to store all of the replicate cox outputs
cox <- vector(mode = "list", length = numreps)
coxcoef <- vector(mode = "list", length = numreps)
numreps <- 500
#run the cox model in a for loop
for(i in 1:numreps) { #for each of the 500 reps in each jar-- i is the replicate it's on
rep <- subset(database, rep_id == i)#filter 1 rep at a time
coxoutput <- coxph(Surv(day, status) ~ treatment + site + treatment:site, data = rep)
cox[[i]] <- coxoutput #store the whole output of the model in a list
blah <- data.frame( #create a data frame with the coefficients and the replicate
coefficients = coxoutput$coefficients,
replicate = i,
pval = summary(coxoutput)$coefficients[,5])
blah$treatment_site <- rownames(blah) #in that dataframe, create a new column that has the treatment and site
#info in it
coxcoef[[i]] <- blah #assign the dataframe to the correct spot in the list
}
#combine all coefficients and p-value into a single dataframe
coefficients_ci20 <- bind_rows(coxcoef)#CI20 as the control
#head(coefficients_ci20)
write.csv(here(coefficients_ci20, "data", "coefficients_ci20.csv"))
#run model with other site as refs
#Just 1 rep cox output
survPW5ref <-Surv(time = PW5ref$day, PW5ref$status, type = "right")
sfPW5ref <- survfit(survPW5ref ~ treatment +site, data = PW5ref)
ggsurvplot(sfPW5ref, conf.int = TRUE)
coxPW5ref<-coxph(survPW5ref ~ treatment * site, data = PW5ref)
coxPW5ref
ggforest(coxPW5ref, data=PW5ref)
##################PW only
#make the data for graphing
sv = Surv(time = database$day, database$status, type = "right") #running Surv model on the replicate,
#taking into account day and status
sf <- survfit(sv ~ site + treatment + rep_id, data = database) #taking what we just made and
#putting it into a different function
#graphing it
ggsurvplot(sf, group.by = c(treatment, site), conf.int = 0.05)
#run the cox model in a for loop
for(i in 1:numreps) { #for each of the 500 reps in each jar-- i is the replicate it's on
rep <- subset(PW5ref, rep_id == i)#filter 1 rep at a time
coxoutput <- coxph(Surv(day, status) ~ treatment * site, data = rep)
cox[[i]] <- coxoutput #store the whole output of the model in a list
blah <- data.frame( #create a data frame with the coefficients and the replicate
coefficients = coxoutput$coefficients,
replicate = i,
pval = summary(coxoutput)$coefficients[,5])
blah$treatment_site <- rownames(blah) #in that dataframe, create a new column that has the treatment and site
#info in it
coxcoef[[i]] <- blah #assign the dataframe to the correct spot in the list
}
#combine all coefficients and p-value into a single dataframe
coefficients_pw5 <- bind_rows(coxcoef)#pw as the control
head(coefficients_pw5)
write.csv(here(coefficients_pw5," "data","coefficients_pw5.csv"))
#################DB only
#DB ref, CI 20 and 5 deleted
DB5ref = filter(bigcox, !(site %in% c("CI5","CI20")))
nrow(DB5ref)
#DB only
#run the cox model in a for loop
for(i in 1:numreps) { #for each of the 500 reps in each jar-- i is the replicate it's on
rep <- subset(DB5ref, rep_id == i)#filter 1 rep at a time
coxoutput <- coxph(Surv(day, status) ~ treatment * site, data = rep)
cox[[i]] <- coxoutput #store the whole output of the model in a list
blah <- data.frame( #create a data frame with the coefficients and the replicate
coefficients = coxoutput$coefficients,
replicate = i,
pval = summary(coxoutput)$coefficients[,5])
blah$treatment_site <- rownames(blah) #in that dataframe, create a new column that has the treatment and site
#info in it
coxcoef[[i]] <- blah #assign the dataframe to the correct spot in the list
}
#combine all coefficients and p-value into a single dataframe
coefficients_DB5 <- bind_rows(coxcoef)#DB as the control
head(coefficients_DB5)
write.csv(coefficients_DB5, file = "coefficients_DB5.csv")
#########################PW14 ref, all other delted
PW5ref = filter(bigcox, !(site %in% c("CI5","DB","CI20")))
write.csv(PW5ref, file = "PW5ref.csv")
head(PW5ref)
#make the data for graphing
sv = Surv(time = PW5ref$day, PW5ref$status, type = "right") #running Surv model on the replicate,
#taking into account day and status
sf <- survfit(sv ~ site + treatment + rep_id, data = PW5ref) #taking what we just made and
#putting it into a different function
#graphing it- takes al ong time
#ggsurvplot(sf, group.by = c(treatment, site), conf.int = 0.05)
#figure out a way to manually define confidence intervals based on the different replicates
#create an empty list to store all of the replicate cox outputs
numreps <- 500
cox <- vector(mode = "list", length = numreps)
coxcoef <- vector(mode = "list", length = numreps)
#run the cox model in a for loop
for(i in 1:numreps) { #for each of the 500 reps in each jar-- i is the replicate it's on
rep <- subset(PW5ref, rep_id == i)#filter 1 rep at a time
coxoutput <- coxph(Surv(day, status) ~ treatment, data = rep)
cox[[i]] <- coxoutput #store the whole output of the model in a list
blah <- data.frame( #create a data frame with the coefficients and the replicate
coefficients = coxoutput$coefficients,
replicate = i,
pval = summary(coxoutput)$coefficients[,5])
blah$treatment_site <- rownames(blah) #in that dataframe, create a new column that has the treatment and site
#info in it
coxcoef[[i]] <- blah #assign the dataframe to the correct spot in the list
}
#combine all coefficients and p-value into a single dataframe
coefficients_PW5ref <- bind_rows(coxcoef)#DB as the control
#head(coefficients_PW5ref)
write.csv(coefficients_PW5ref, file = "coefficients_PW5ref.csv")
#############CI5 ref
#PW14 ref, all other delted
CI5ref = filter(bigcox, !(site %in% c("CI20")))
write.csv(CI5ref, file = "CI5ref.csv")
head(CI5ref)
gc()
#make the data for graphing
sv = Surv(time = CI5ref$day, CI5ref$status, type = "right") #running Surv model on the replicate,
#taking into account day and status
sf <- survfit(sv ~ site + treatment + rep_id, data = CI5ref) #taking what we just made and
#putting it into a different function
#graphing it- takes al ong time
#ggsurvplot(sf, group.by = c(treatment, site), conf.int = 0.05)
#figure out a way to manually define confidence intervals based on the different replicates
#create an empty list to store all of the replicate cox outputs
numreps <- 500
cox <- vector(mode = "list", length = numreps)
coxcoef <- vector(mode = "list", length = numreps)
#run the cox model in a for loop
for(i in 1:numreps) { #for each of the 500 reps in each jar-- i is the replicate it's on
rep <- subset(CI5ref, rep_id == i)#filter 1 rep at a time
coxoutput <- coxph(Surv(day, status) ~ treatment * site, data = rep)
cox[[i]] <- coxoutput #store the whole output of the model in a list
blah <- data.frame( #create a data frame with the coefficients and the replicate
coefficients = coxoutput$coefficients,
replicate = i,
pval = summary(coxoutput)$coefficients[,5])
blah$treatment_site <- rownames(blah) #in that dataframe, create a new column that has the treatment and site
#info in it
coxcoef[[i]] <- blah #assign the dataframe to the correct spot in the list
}
#combine all coefficients and p-value into a single dataframe
coefficients_CI5ref <- bind_rows(coxcoef)#DB as the control
#head(coefficients_CI5ref)
write.csv(here(coefficients_CI5ref, "data","coefficients_CI5ref.csv"))
#Next steps on this.
# One issue is how to deal with the day 0 jar simumalion. Easiest (and maybe best?) solution is just start
# your survival analysis on day 1 when you start the 6ml sampling.
#alternarive is to figure out the distibution of initial stocking density based on your stocking method.
#the target intial stocking was 800 per jar, but there is liekly a lot of noise around that based on sampling
# X simulate a 1000 valid (monotoncially decreasing) time series of counts for each jar
# X The above code makes valid series, but need to modify it so you get a 1000 for each jar of the real data
# X treat the jars like you have 1000 replicate experiments
# X expand the jar counts with 0/1 scoring per individual for running cox model like you did before
# x you and run the analysis based on live count or dead count (for live count, subtract dead based on day1 count)
# x run the cox model on each of the 1000 data sets
# x store the output hazard ratio coefficients() as a vector with 1000 values)
# x you can actually just save all 1000 model outputs (not just coefficients) in case we want to look at other values
# x sort the coefficients from smallest to largest - the 2.5% and 97.5% quantiles will give the 95% confidence intervals.
# x the mean is  the expected value of the hazard ratio
#after getting this to work with the simple cox model, can look at coxme or frailty_em to deal with mixed effects
#the reason why the jar sampling is an issue has to do with whether larvae in the jar are distributed randomly or uniformly.
#If the larvae were uniformly distributed, your 6ml sample would exactly reflect what is in the jar
#However, larvae are (at best) randomly distributed in the jar, so sampling probability matters
#The larger the fraction of the jar you actually count, the less sampling probably matters (uniform assumption gets close enough)
#The actuall confidence intervals will be a bit wider than estimated with this method because of basic uncertainy in estiminating cox model
#however, with n = ~ 800, this should not be a big contribution and the CI should be pretty close.
write.csv(here(coefficients_pw5," "data","coefficients_pw5.csv"))
#################DB only
#DB ref, CI 20 and 5 deleted
DB5ref = filter(bigcox, !(site %in% c("CI5","CI20"))
nrow(DB5ref)
#DB only
#run the cox model in a for loop
for(i in 1:numreps) { #for each of the 500 reps in each jar-- i is the replicate it's on
rep <- subset(DB5ref, rep_id == i)#filter 1 rep at a time
coxoutput <- coxph(Surv(day, status) ~ treatment * site, data = rep)
cox[[i]] <- coxoutput #store the whole output of the model in a list
blah <- data.frame( #create a data frame with the coefficients and the replicate
coefficients = coxoutput$coefficients,
replicate = i,
pval = summary(coxoutput)$coefficients[,5])
blah$treatment_site <- rownames(blah) #in that dataframe, create a new column that has the treatment and site
#info in it
coxcoef[[i]] <- blah #assign the dataframe to the correct spot in the list
}
#combine all coefficients and p-value into a single dataframe
coefficients_DB5 <- bind_rows(coxcoef)#DB as the control
head(coefficients_DB5)
write.csv(coefficients_DB5, file = "coefficients_DB5.csv")
#########################PW14 ref, all other delted
PW5ref = filter(bigcox, !(site %in% c("CI5","DB","CI20")))
write.csv(PW5ref, file = "PW5ref.csv")
head(PW5ref)
#make the data for graphing
sv = Surv(time = PW5ref$day, PW5ref$status, type = "right") #running Surv model on the replicate,
#taking into account day and status
sf <- survfit(sv ~ site + treatment + rep_id, data = PW5ref) #taking what we just made and
#putting it into a different function
#graphing it- takes al ong time
#ggsurvplot(sf, group.by = c(treatment, site), conf.int = 0.05)
#figure out a way to manually define confidence intervals based on the different replicates
#create an empty list to store all of the replicate cox outputs
numreps <- 500
cox <- vector(mode = "list", length = numreps)
coxcoef <- vector(mode = "list", length = numreps)
#run the cox model in a for loop
for(i in 1:numreps) { #for each of the 500 reps in each jar-- i is the replicate it's on
rep <- subset(PW5ref, rep_id == i)#filter 1 rep at a time
coxoutput <- coxph(Surv(day, status) ~ treatment, data = rep)
cox[[i]] <- coxoutput #store the whole output of the model in a list
blah <- data.frame( #create a data frame with the coefficients and the replicate
coefficients = coxoutput$coefficients,
replicate = i,
pval = summary(coxoutput)$coefficients[,5])
blah$treatment_site <- rownames(blah) #in that dataframe, create a new column that has the treatment and site
#info in it
coxcoef[[i]] <- blah #assign the dataframe to the correct spot in the list
}
#combine all coefficients and p-value into a single dataframe
coefficients_PW5ref <- bind_rows(coxcoef)#DB as the control
#head(coefficients_PW5ref)
write.csv(coefficients_PW5ref, file = "coefficients_PW5ref.csv")
#############CI5 ref
#PW14 ref, all other delted
CI5ref = filter(bigcox, !(site %in% c("CI20")))
write.csv(CI5ref, file = "CI5ref.csv")
head(CI5ref)
gc()
#make the data for graphing
sv = Surv(time = CI5ref$day, CI5ref$status, type = "right") #running Surv model on the replicate,
#taking into account day and status
sf <- survfit(sv ~ site + treatment + rep_id, data = CI5ref) #taking what we just made and
#putting it into a different function
#graphing it- takes al ong time
#ggsurvplot(sf, group.by = c(treatment, site), conf.int = 0.05)
#figure out a way to manually define confidence intervals based on the different replicates
#create an empty list to store all of the replicate cox outputs
numreps <- 500
cox <- vector(mode = "list", length = numreps)
coxcoef <- vector(mode = "list", length = numreps)
#run the cox model in a for loop
for(i in 1:numreps) { #for each of the 500 reps in each jar-- i is the replicate it's on
rep <- subset(CI5ref, rep_id == i)#filter 1 rep at a time
coxoutput <- coxph(Surv(day, status) ~ treatment * site, data = rep)
cox[[i]] <- coxoutput #store the whole output of the model in a list
blah <- data.frame( #create a data frame with the coefficients and the replicate
coefficients = coxoutput$coefficients,
replicate = i,
pval = summary(coxoutput)$coefficients[,5])
blah$treatment_site <- rownames(blah) #in that dataframe, create a new column that has the treatment and site
#info in it
coxcoef[[i]] <- blah #assign the dataframe to the correct spot in the list
}
#combine all coefficients and p-value into a single dataframe
coefficients_CI5ref <- bind_rows(coxcoef)#DB as the control
#head(coefficients_CI5ref)
write.csv(here(coefficients_CI5ref, "data","coefficients_CI5ref.csv"))
#Next steps on this.
# One issue is how to deal with the day 0 jar simumalion. Easiest (and maybe best?) solution is just start
# your survival analysis on day 1 when you start the 6ml sampling.
#alternarive is to figure out the distibution of initial stocking density based on your stocking method.
#the target intial stocking was 800 per jar, but there is liekly a lot of noise around that based on sampling
# X simulate a 1000 valid (monotoncially decreasing) time series of counts for each jar
# X The above code makes valid series, but need to modify it so you get a 1000 for each jar of the real data
# X treat the jars like you have 1000 replicate experiments
# X expand the jar counts with 0/1 scoring per individual for running cox model like you did before
# x you and run the analysis based on live count or dead count (for live count, subtract dead based on day1 count)
# x run the cox model on each of the 1000 data sets
# x store the output hazard ratio coefficients() as a vector with 1000 values)
# x you can actually just save all 1000 model outputs (not just coefficients) in case we want to look at other values
# x sort the coefficients from smallest to largest - the 2.5% and 97.5% quantiles will give the 95% confidence intervals.
# x the mean is  the expected value of the hazard ratio
#after getting this to work with the simple cox model, can look at coxme or frailty_em to deal with mixed effects
#the reason why the jar sampling is an issue has to do with whether larvae in the jar are distributed randomly or uniformly.
#If the larvae were uniformly distributed, your 6ml sample would exactly reflect what is in the jar
#However, larvae are (at best) randomly distributed in the jar, so sampling probability matters
#The larger the fraction of the jar you actually count, the less sampling probably matters (uniform assumption gets close enough)
#The actuall confidence intervals will be a bit wider than estimated with this method because of basic uncertainy in estiminating cox model
#however, with n = ~ 800, this should not be a big contribution and the CI should be pretty close.
